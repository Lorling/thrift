// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <iostream>
#include <thread>
#include <mutex>
#include <queue>
#include <vector>
#include <condition_variable>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::match_service;
using namespace std;

struct Task{
    User user;
    string type;//记录add或者remove
};

struct Queue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}task_queue;

class Pool{
private:
    vector<User> users;
public:
    void save_result(int a,int b){
        printf("Match result is %d and %d.\n",a,b);
    }

    void match(){
        while(users.size()>1){
            auto a=users[0], b=users[1];
            save_result(a.id, b.id);
            users.erase(users.begin());
            users.erase(users.begin());
        }
    }

    void add(User user){
        users.push_back(user);
    }

    void remove(User user){
        for(uint32_t i=0; i<users.size(); i++){
            if(users[i].id == user.id){
                users.erase(users.begin() + i);
                break;
            }
        }
    }
}pool;


class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }

  int32_t add_user(const User& user, const std::string& info) {
    // Your implementation goes here
    printf("add_user\n");

    unique_lock<mutex> lock(task_queue.m);
    task_queue.q.push({user,"add"});
    task_queue.cv.notify_all();

    return 0;
  }

  int32_t remove_user(const User& user, const std::string& info) {
    // Your implementation goes here
    printf("remove_user\n");

    unique_lock<mutex> lock(task_queue.m);
    task_queue.q.push({user,"remove"});
    task_queue.cv.notify_all();

    return 0;
  }

};

void match_task(){
    while (true){
        unique_lock<mutex> lock(task_queue.m);
        if(task_queue.q.empty()){
            task_queue.cv.wait(lock);
        }
        else {
            auto task = task_queue.q.front();
            task_queue.q.pop();
            task_queue.m.unlock();

            if(task.type == "add")
                pool.add(task.user);
            if(task.type == "remove")
                pool.remove(task.user);
            
            pool.match();
        }
    }
}

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<MatchHandler> handler(new MatchHandler());
  ::std::shared_ptr<TProcessor> processor(new MatchProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  cout<<"Start Match Server"<<endl;

  thread matching_thread(match_task);

  server.serve();
  return 0;
}

